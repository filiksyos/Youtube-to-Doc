<div class="relative" id="main-card">
    <div class="w-full h-full absolute inset-0 bg-gray-900 rounded-xl translate-y-2 translate-x-2"></div>
    <div class="rounded-xl relative z-20 pl-8 sm:pl-10 pr-8 sm:pr-16 py-8 border-[3px] border-gray-900 bg-[#fff4da]">
        <form id="doc-form" method="post" class="flex md:flex-row flex-col w-full h-full justify-center items-stretch space-y-5 md:space-y-0 md:space-x-5">
            <div class="relative w-full h-full">
                <div class="w-full h-full rounded bg-gray-900 translate-y-1 translate-x-1 absolute inset-0 z-10"></div>
                <input
                    type="text"
                    id="input_text"
                    name="input_text"
                    placeholder="https://www.youtube.com/watch?v=..."
                    value="{{ video_url or '' }}"
                    required
                    class="border-[3px] w-full relative z-20 border-gray-900 placeholder-gray-600 text-lg font-medium focus:outline-none py-3.5 px-6 rounded"
                />
            </div>

            <div class="relative w-auto flex-shrink-0 h-full group">
                <div class="w-full h-full rounded bg-gray-800 translate-y-1 translate-x-1 absolute inset-0 z-10"></div>
                <button type="submit" id="create-docs-btn"
                        class="py-3.5 rounded px-6 group-hover:-translate-y-px group-hover:-translate-x-px ease-out duration-300 z-20 relative w-full border-[3px] border-gray-900 font-medium bg-[#ff6b6b] tracking-wide text-lg flex-shrink-0 text-white inline-flex items-center justify-center gap-2">
                    Create Docs
                </button>
            </div>
        </form>
        <div id="examples-section">
            {% if show_examples and examples %}
                <div class="mt-4">
                    <p class="opacity-70 mb-1">Try these example videos:</p>
                    <div class="flex flex-wrap gap-2">
                        {% for example in examples %}
                            <button onclick="submitExample('{{ example.url }}')"
                                    class="px-4 py-1 bg-[#EBDBB7] hover:bg-[#FFC480] text-gray-900 rounded transition-colors duration-200 border-[3px] border-gray-900 relative hover:-translate-y-px hover:-translate-x-px">
                                {{ example.name }}
                            </button>
                        {% endfor %}
                    </div>
                </div>
            {% endif %}
        </div>
    </div>
</div>

<!-- Loading card placeholder -->
<div id="loading-card-container" class="mt-4"></div>
<script>
(function(){
  const form = document.getElementById('doc-form');
  if (!form) return;

  const examplesSection = document.getElementById('examples-section');
  const loadingContainer = document.getElementById('loading-card-container');
  const inputEl = document.getElementById('input_text');
  const btn = document.getElementById('create-docs-btn');

  function compactMainCard() {
    if (examplesSection) {
      examplesSection.style.display = 'none';
    }
  }

  function renderLoadingCard(initialMessage) {
    loadingContainer.innerHTML = `
      <div class="relative">
        <div class="w-full h-full absolute inset-0 bg-gray-900 rounded-xl translate-y-2 translate-x-2"></div>
        <div class="rounded-xl relative z-20 p-6 border-[3px] border-gray-900 bg-[#fff4da]">
          <div id="loading-header" class="flex items-center justify-between">
            <div id="loading-title-text" class="text-gray-900 font-medium">Generating...</div>
            <div class="flex gap-1 items-center">
              <span class="inline-flex gap-1">
                <span class="dot dot-1"></span>
                <span class="dot dot-2"></span>
                <span class="dot dot-3"></span>
              </span>
            </div>
          </div>
        </div>
      </div>`;
  }

  function setStatus(text) {
    const el = document.getElementById('loading-title-text');
    if (el) el.textContent = text;
  }





  function startCustomLoading() {
    const loadingMessages = [
      "Checking if it's cached...",
      "Validating URL...", 
      "Extracting video metadata...",
      "Processing transcript...",
      "Generating documentation...",
      "Uploading to cloud storage...",
      "Almost done...",
      "Finalizing..."
    ];
    
    let currentIndex = 0;
    setStatus(loadingMessages[0]);
    
    const messageInterval = setInterval(() => {
      currentIndex = (currentIndex + 1) % loadingMessages.length;
      setStatus(loadingMessages[currentIndex]);
    }, 2500); // Change message every 2.5 seconds
    
    // Store interval ID so we can clear it if needed
    window.loadingInterval = messageInterval;
  }

  form.addEventListener('submit', function(e){
    try {
      const url = inputEl && inputEl.value ? inputEl.value.trim() : '';
      if (!url) return; // allow default handling
      
      // If we are on the home page, navigate to /watch?v=... first
      const isWatchPage = window.location.pathname === '/watch';
      const videoId = (function(){ try { return extractVideoId(url); } catch(_) { return null; } })();
      if (!isWatchPage && videoId) {
        window.location.href = `/watch?v=${videoId}`;
        return;
      }
      
      // Show loading animation and submit form normally
      compactMainCard();
      renderLoadingCard('Generating documentation');
      startCustomLoading();
      
      // Let form submit normally - no preventDefault
    } catch (_) {
      // Normal form submission will happen
    }
  });
  
  // Auto-start loading on /watch if a URL is prefilled
  document.addEventListener('DOMContentLoaded', function(){
    const isWatchPage = window.location.pathname === '/watch';
    const url = inputEl && inputEl.value ? inputEl.value.trim() : '';
    if (isWatchPage && url) {
      compactMainCard();
      renderLoadingCard('Generating documentation');
      startCustomLoading();
      
      // Auto-submit the form
      setTimeout(() => {
        form.submit();
      }, 100);
    }
  });
  
  // Clean up intervals when page unloads
  window.addEventListener('beforeunload', function() {
    if (window.loadingInterval) {
      clearInterval(window.loadingInterval);
    }
  });
})();
</script>

<style>
.dot { display:inline-block; width:6px; height:6px; border-radius:9999px; background:#7c3aed; opacity:.25; }
.dot-1 { animation: dotfade 1.2s infinite; }
.dot-2 { animation: dotfade 1.2s .2s infinite; }
.dot-3 { animation: dotfade 1.2s .4s infinite; }
@keyframes dotfade { 0%, 100% { opacity:.2 } 50% { opacity:1 } }
</style>